import preliminaries group_theory.free_group group_theory.coset group_theory.quotient_group

/- Some definitions for specifying a finite group as a quotient of a free group -/

namespace group_language

/-- The propositional language of a group -/
inductive term (α : Type*) [group α]
| sym : α → term
| mul : term → term → term
| pow : term → ℕ → term
| inv : term → term
| id : term

instance {α} [group α] : has_one $ term α := ⟨term.id α⟩

/-- A relation is a formal equality of terms -/
inductive relation (α : Type*) [group α]
| eq : term α → term α → relation

/-- Given a list xs of relations on α, return the normal subgroup of α generated by xs -/
def normal_subgroup_mk {α : Type*} [group α] (xs : list $ relation α) : set (α) := sorry

instance normal_subgroup_mk_normal {α : Type*} [group α] (xs : list $ relation α) : normal_subgroup (normal_subgroup_mk xs) := omitted

-- def group_of_generators_relations (gen : Type*) (relations : list $ relation gen) : Group :=
--   ⟨quotient_group.quotient (normal_subgroup_mk relations), by apply_instance⟩

def group_modulo_relations (α : Type*) [group α] (relations : list $ relation α) : Group :=
  ⟨quotient_group.quotient (normal_subgroup_mk relations), by apply_instance⟩

notation α `/⟨`:95 R `⟩`:90 := group_modulo_relations α R

end group_language

open group_language

namespace presentation

local notation `⟨`:50 a `⟩`:50 := free_group.of a

def term_mk {α : Type*} : α → (term (free_group α)) :=
  λ a, term.sym ⟨a⟩

-- /-- The propositional language of the free group generated by α-/
-- inductive term (α : Type*)
-- | sym : α → term
-- | mul : term → term → term
-- | pow : term → ℕ → term
-- | inv : term → term
-- | id : term

local notation a `̂ `:70 k:70 := term.pow (term_mk a) k

local notation a `×'`:75 b:75 := term.mul (term_mk a) (b)

local notation a`⁻¹`:65 := term.inv (term_mk a)

local notation t₁ `≃`:60 t₂ := relation.eq t₁ t₂

notation a `×'`:75 b:75 := term.mul (term_mk a) (term_mk b)

def group_of_generators_relations (gen : Type*) (relations : list $ relation (free_group gen)) : Group := 
  (free_group gen)/⟨relations⟩

notation `⟨`:95 G `|`:90 R`⟩`:0 := group_of_generators_relations G R

end presentation
