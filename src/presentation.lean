import preliminaries group_theory.free_group group_theory.coset group_theory.quotient_group

/- Some definitions for specifying a finite group as a quotient of a free group -/

namespace group_language

variables {α : Type*} [group α]
/-- Given a list xs of relations on α, return the normal subgroup of α generated by xs -/
inductive normal_subgroup_mk (xs : set α) : set α
| base : Π{{x}}, x ∈ xs → normal_subgroup_mk x
| mul  : Π{{x y}}, normal_subgroup_mk x → normal_subgroup_mk y → normal_subgroup_mk (x * y)
| inv  : Π{{x}}, normal_subgroup_mk x → normal_subgroup_mk (x⁻¹)
| one  : normal_subgroup_mk 1
| normal : Π{{x}} y, normal_subgroup_mk x → normal_subgroup_mk (y⁻¹ * x * y)

instance normal_subgroup_mk_normal {α : Type*} [group α] (xs : set α) : 
  normal_subgroup (normal_subgroup_mk xs) := 
omitted

-- def group_of_generators_relations (gen : Type*) (relations : list $ relation gen) : Group :=
--   ⟨quotient_group.quotient (normal_subgroup_mk relations), by apply_instance⟩

def group_modulo_relations (α : Type*) [group α] (xs : set α) : Group :=
  ⟨quotient_group.quotient (normal_subgroup_mk xs), by apply_instance⟩
 
notation α `/⟨`:95 R `⟩`:90 := group_modulo_relations α R

end group_language

open group_language

namespace presentation

local notation `⟨`:50 a `⟩`:50 := free_group.of a

def group_of_generators_relations (gen : Type*) (relations : set (free_group gen)) : Group := 
  (free_group gen)/⟨relations⟩

notation `⟨`:95 G `|`:90 R`⟩`:0 := group_of_generators_relations G R

end presentation
